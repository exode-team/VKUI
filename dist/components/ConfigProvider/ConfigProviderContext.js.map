{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProviderContext.tsx"],"names":["React","vkBridge","platform","WebviewType","defaultConfigProviderProps","webviewType","VKAPPS","isWebView","transitionMotionEnabled","hasNewTokens","ConfigProviderContext","createContext"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAyC,sBAAzC;AACA,SAAuBC,QAAvB;AAEA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAkCZ,OAAO,IAAMC,0BAA0B,GAAG;AACxCC,EAAAA,WAAW,EAAEF,WAAW,CAACG,MADe;AAExCC,EAAAA,SAAS,EAAEN,QAAQ,CAACM,SAAT,EAF6B;AAGxCC,EAAAA,uBAAuB,EAAE,IAHe;AAIxCN,EAAAA,QAAQ,EAAEA,QAAQ,EAJsB;AAKxCO,EAAAA,YAAY,EAAE,KAL0B,CAMxC;AACA;;AAPwC,CAAnC;AAUP,OAAO,IAAMC,qBAAqB,gBAChCV,KAAK,CAACW,aAAN,CACEP,0BADF,CADK","sourcesContent":["import * as React from \"react\";\nimport vkBridge, { AppearanceType } from \"@vkontakte/vk-bridge\";\nimport { PlatformType, platform } from \"../../lib/platform\";\n\nexport enum WebviewType {\n  VKAPPS = \"vkapps\",\n  INTERNAL = \"internal\",\n}\n\nexport interface ConfigProviderContextInterface {\n  /**\n   * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере\n   */\n  isWebView: boolean;\n  /**\n   * Тип вебвью.<br>\n   * В случае `WebviewType.VKAPPS` интерфейс будет адаптирован для отображения в вебвью Mini Apps (системные контролы в правой части шапки)\n   */\n  webviewType: WebviewType.INTERNAL | WebviewType.VKAPPS;\n  /**\n   * Тип приложения\n   */\n  app?: string;\n  /**\n   * Тип цветовой схемы – `light` или `dark`\n   */\n  appearance?: AppearanceType;\n  /**\n   * Включена ли анимация переходов между экранами в `Root` и `View`\n   */\n  transitionMotionEnabled: boolean;\n  /**\n   * Платформа\n   */\n  platform: PlatformType;\n  hasNewTokens: boolean;\n}\n\nexport const defaultConfigProviderProps = {\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  transitionMotionEnabled: true,\n  platform: platform(),\n  hasNewTokens: false,\n  // appearance is auto-detected by default\n  // appearance: Appearance.LIGHT,\n};\n\nexport const ConfigProviderContext =\n  React.createContext<ConfigProviderContextInterface>(\n    defaultConfigProviderProps\n  );\n"],"file":"ConfigProviderContext.js"}