{"version":3,"sources":["../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"names":["React","classNames","Chip","noop","useChipsInput","useAdaptivity","prefixClass","useExternRef","chipsInputDefaultProps","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","ChipsInputBase","propsWithDefault","style","className","getRootRef","children","getRef","placeholder","restProps","sizeY","useState","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","current","focus","map","onRemove","Boolean"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { HasAlign, HasRef, HasRootRef } from \"../../types\";\nimport { classNames } from \"../../lib/classNames\";\nimport { Chip, ChipOption, ChipValue, RenderChip } from \"../Chip/Chip\";\nimport { noop } from \"../../lib/utils\";\nimport { useChipsInput } from \"../../hooks/useChipsInput\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { prefixClass } from \"../../lib/prefixClass\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport \"./ChipsInputBase.css\";\n\nexport interface ChipsInputBaseProps<Option extends ChipOption>\n  extends Omit<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"value\" | \"onChange\"\n    >,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n}\n\nexport const chipsInputDefaultProps: ChipsInputBaseProps<any> = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: \"\",\n  inputAriaLabel: \"Введите ваше значение...\",\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n};\n\nexport const ChipsInputBase = <Option extends ChipOption>(\n  props: ChipsInputBaseProps<Option>\n) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    className,\n    getRootRef,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    inputValue,\n    getRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    inputAriaLabel,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const {\n    fieldValue,\n    addOptionFromInput,\n    removeOption,\n    selectedOptions,\n    handleInputChange,\n  } = useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (\n      e.key === \"Backspace\" &&\n      !e.defaultPrevented &&\n      !fieldValue &&\n      selectedOptions.length\n    ) {\n      removeOption(\n        getOptionValue!(selectedOptions[selectedOptions.length - 1])\n      );\n      e.preventDefault();\n    }\n\n    if (e.key === \"Enter\" && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (\n    _: React.MouseEvent | undefined,\n    value: ChipValue | undefined\n  ) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      vkuiClass={classNames(\"ChipsInputBase\", `ChipsInputBase--sizeY-${sizeY}`)}\n      onClick={handleClick}\n      role=\"presentation\"\n      style={style}\n      className={className}\n      ref={getRootRef}\n    >\n      {selectedOptions.map((option: Option) => {\n        const value = getOptionValue!(option);\n        const label = getOptionLabel!(option);\n\n        return (\n          <React.Fragment key={`${typeof value}-${value}`}>\n            {renderChip!({\n              option,\n              value,\n              label,\n              onRemove: handleChipRemove,\n              disabled: Boolean(restProps.disabled),\n              className: prefixClass(\"ChipsInputBase__chip\"),\n            })}\n          </React.Fragment>\n        );\n      })}\n      <label vkuiClass=\"ChipsInputBase__label\" aria-label={inputAriaLabel}>\n        <input\n          type=\"text\"\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          aria-autocomplete=\"list\"\n          vkuiClass=\"ChipsInputBase__el\"\n          {...restProps}\n          ref={inputRef}\n          value={fieldValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={selectedOptions.length ? undefined : placeholder}\n        />\n      </label>\n    </div>\n  );\n};\n"],"file":"ChipsInputBase.js"}