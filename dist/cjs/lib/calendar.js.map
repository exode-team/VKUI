{"version":3,"sources":["../../../src/lib/calendar.ts"],"names":["getYears","currentYear","range","years","i","push","label","String","padStart","value","getMonths","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","getDaysNames","now","weekStartsOn","weekday","map","day","navigateDate","date","key","newDate","getWeeks","viewDate","start","end","count","current","nestedWeeks","lastDay","weekNumber","Math","floor","getDay","setTimeEqual","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","isFirstDay","dayOfWeek","isLastDay"],"mappings":"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","sourcesContent":["import {\n  eachDayOfInterval,\n  startOfWeek,\n  endOfWeek,\n  addDays,\n  subDays,\n  subWeeks,\n  addWeeks,\n  startOfMonth,\n  endOfMonth,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n} from \"./date\";\n\nexport const getYears = (currentYear: number, range: number) => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  for (let i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({ label: String(i).padStart(4, \"0\"), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (locale?: string) => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: \"long\",\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date(\"1970-01-01\").setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string\n) => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: \"short\",\n  });\n  return eachDayOfInterval(\n    startOfWeek(now, weekStartsOn),\n    endOfWeek(now, weekStartsOn)\n  ).map((day) => formatter.format(day));\n};\n\nexport const navigateDate = (date?: Date | null, key?: string) => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case \"ArrowRight\":\n      newDate = addDays(newDate, 1);\n      break;\n    case \"ArrowLeft\":\n      newDate = subDays(newDate, 1);\n      break;\n    case \"ArrowUp\":\n      newDate = subWeeks(newDate, 1);\n      break;\n    case \"ArrowDown\":\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (\n  viewDate: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6\n) => {\n  const start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  const end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null) => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number) =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number) =>\n  dayOfWeek === 6 || isLastDayOfMonth(day);\n"],"file":"calendar.js"}