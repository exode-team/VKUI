{"version":3,"file":"platform.js","names":["Platform","PLATFORM_ALIAS","desktop_web","VKCOM","isPlatformAlias","platformAlias","getPlatformByQueryString","queryString","parsedQuery","querystring","parse","platformAliasByQuery","undefined","e","console","warn","platformByQueryString","canUseDOM","location","search","ANDROID","IOS","platform","browserInfo","computeBrowserInfo","system","platformName","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"sources":["../../../src/lib/platform.ts"],"sourcesContent":["import { BrowserInfo, computeBrowserInfo } from \"./browser\";\nimport { querystring } from \"@vkontakte/vkjs\";\nimport { canUseDOM } from \"./dom\";\n\nexport enum Platform {\n  ANDROID = \"android\",\n  IOS = \"ios\",\n  VKCOM = \"vkcom\",\n}\n\nconst PLATFORM_ALIAS = {\n  desktop_web: Platform.VKCOM,\n};\n\nfunction isPlatformAlias(\n  platformAlias: string\n): platformAlias is keyof typeof PLATFORM_ALIAS {\n  return platformAlias in PLATFORM_ALIAS;\n}\n\n/**\n * Значение, которое передаётся в качестве query-параметра при открытии VK Mini Apps\n * @see {@link https://dev.vk.com/mini-apps/development/launch-params#vk_platform vk_platform}\n */\nfunction getPlatformByQueryString(queryString: string): Platform | undefined {\n  try {\n    const parsedQuery = querystring.parse(queryString);\n    const platformAliasByQuery = parsedQuery[\"vk_platform\"];\n\n    return typeof platformAliasByQuery === \"string\" &&\n      isPlatformAlias(platformAliasByQuery)\n      ? PLATFORM_ALIAS[platformAliasByQuery]\n      : undefined;\n  } catch (e) {\n    console.warn(e);\n\n    return undefined;\n  }\n}\n\nconst platformByQueryString = canUseDOM\n  ? getPlatformByQueryString(location.search)\n  : undefined;\n\nexport const ANDROID = Platform.ANDROID;\nexport const IOS = Platform.IOS;\nexport const VKCOM = Platform.VKCOM;\n\nexport type PlatformType =\n  | Platform.ANDROID\n  | Platform.IOS\n  | Platform.VKCOM\n  | string;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (platformByQueryString) {\n    return platformByQueryString;\n  }\n\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === \"ios\" ? IOS : ANDROID;\n}\n\nconst platformName = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = platformName === ANDROID;\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AAAkC,IAEtBA,QAAQ;AAAA;AAAA,WAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;AAAA,GAARA,QAAQ,wBAARA,QAAQ;AAMpB,IAAMC,cAAc,GAAG;EACrBC,WAAW,EAAEF,QAAQ,CAACG;AACxB,CAAC;AAED,SAASC,eAAe,CACtBC,aAAqB,EACyB;EAC9C,OAAOA,aAAa,IAAIJ,cAAc;AACxC;;AAEA;AACA;AACA;AACA;AACA,SAASK,wBAAwB,CAACC,WAAmB,EAAwB;EAC3E,IAAI;IACF,IAAMC,WAAW,GAAGC,iBAAW,CAACC,KAAK,CAACH,WAAW,CAAC;IAClD,IAAMI,oBAAoB,GAAGH,WAAW,CAAC,aAAa,CAAC;IAEvD,OAAO,OAAOG,oBAAoB,KAAK,QAAQ,IAC7CP,eAAe,CAACO,oBAAoB,CAAC,GACnCV,cAAc,CAACU,oBAAoB,CAAC,GACpCC,SAAS;EACf,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;IAEf,OAAOD,SAAS;EAClB;AACF;AAEA,IAAMI,qBAAqB,GAAGC,cAAS,GACnCX,wBAAwB,CAACY,QAAQ,CAACC,MAAM,CAAC,GACzCP,SAAS;AAEN,IAAMQ,OAAO,GAAGpB,QAAQ,CAACoB,OAAO;AAAC;AACjC,IAAMC,GAAG,GAAGrB,QAAQ,CAACqB,GAAG;AAAC;AACzB,IAAMlB,KAAK,GAAGH,QAAQ,CAACG,KAAK;AAAC;AAQ7B,SAASmB,QAAQ,CAACC,WAAyB,EAAgB;EAChE,IAAIP,qBAAqB,EAAE;IACzB,OAAOA,qBAAqB;EAC9B;EAEA,IAAI,CAACO,WAAW,EAAE;IAChBA,WAAW,GAAG,IAAAC,2BAAkB,GAAE;EACpC;EAEA,OAAOD,WAAW,CAACE,MAAM,KAAK,KAAK,GAAGJ,GAAG,GAAGD,OAAO;AACrD;AAEA,IAAMM,YAAY,GAAGJ,QAAQ,EAAE;;AAE/B;AACA;AACA;AACO,IAAMK,eAAwB,GAAGD,YAAY,KAAKL,GAAG;AAC5D;AACA;AACA;AAFA;AAGO,IAAMO,mBAA4B,GAAGF,YAAY,KAAKN,OAAO;AAAC"}