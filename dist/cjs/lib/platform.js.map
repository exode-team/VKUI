{"version":3,"sources":["../../../src/lib/platform.ts"],"names":["Platform","PLATFORM_ALIAS","desktop_web","VKCOM","isPlatformAlias","platformAlias","getPlatformByQueryString","queryString","parsedQuery","querystring","parse","platformAliasByQuery","undefined","platformByQueryString","canUseDOM","location","search","ANDROID","IOS","platform","browserInfo","system","platformName","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;IAEYA,Q;;;WAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,wBAAAA,Q;;AAMZ,IAAMC,cAAc,GAAG;AACrBC,EAAAA,WAAW,EAAEF,QAAQ,CAACG;AADD,CAAvB;;AAIA,SAASC,eAAT,CACEC,aADF,EAEgD;AAC9C,SAAOA,aAAa,IAAIJ,cAAxB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASK,wBAAT,CAAkCC,WAAlC,EAA6E;AAC3E,MAAMC,WAAW,GAAGC,kBAAYC,KAAZ,CAAkBH,WAAlB,CAApB;;AACA,MAAMI,oBAAoB,GAAGH,WAAW,CAAC,aAAD,CAAxC;AAEA,SAAO,OAAOG,oBAAP,KAAgC,QAAhC,IACLP,eAAe,CAACO,oBAAD,CADV,GAEHV,cAAc,CAACU,oBAAD,CAFX,GAGHC,SAHJ;AAID;;AAED,IAAMC,qBAAqB,GAAGC,iBAC1BR,wBAAwB,CAACS,QAAQ,CAACC,MAAV,CADE,GAE1BJ,SAFJ;AAIO,IAAMK,OAAO,GAAGjB,QAAQ,CAACiB,OAAzB;;AACA,IAAMC,GAAG,GAAGlB,QAAQ,CAACkB,GAArB;;AACA,IAAMf,KAAK,GAAGH,QAAQ,CAACG,KAAvB;;;AAQA,SAASgB,QAAT,CAAkBC,WAAlB,EAA2D;AAChE,MAAIP,qBAAJ,EAA2B;AACzB,WAAOA,qBAAP;AACD;;AAED,MAAI,CAACO,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,kCAAd;AACD;;AAED,SAAOA,WAAW,CAACC,MAAZ,KAAuB,KAAvB,GAA+BH,GAA/B,GAAqCD,OAA5C;AACD;;AAED,IAAMK,YAAY,GAAGH,QAAQ,EAA7B;AAEA;AACA;AACA;;AACO,IAAMI,eAAwB,GAAGD,YAAY,KAAKJ,GAAlD;AACP;AACA;AACA;;;AACO,IAAMM,mBAA4B,GAAGF,YAAY,KAAKL,OAAtD","sourcesContent":["import { BrowserInfo, computeBrowserInfo } from \"./browser\";\nimport { querystring } from \"@vkontakte/vkjs\";\nimport { canUseDOM } from \"./dom\";\n\nexport enum Platform {\n  ANDROID = \"android\",\n  IOS = \"ios\",\n  VKCOM = \"vkcom\",\n}\n\nconst PLATFORM_ALIAS = {\n  desktop_web: Platform.VKCOM,\n};\n\nfunction isPlatformAlias(\n  platformAlias: string\n): platformAlias is keyof typeof PLATFORM_ALIAS {\n  return platformAlias in PLATFORM_ALIAS;\n}\n\n/**\n * Значение, которое передаётся в качестве query-параметра при открытии VK Mini Apps\n * @see {@link https://dev.vk.com/mini-apps/development/launch-params#vk_platform vk_platform}\n */\nfunction getPlatformByQueryString(queryString: string): Platform | undefined {\n  const parsedQuery = querystring.parse(queryString);\n  const platformAliasByQuery = parsedQuery[\"vk_platform\"];\n\n  return typeof platformAliasByQuery === \"string\" &&\n    isPlatformAlias(platformAliasByQuery)\n    ? PLATFORM_ALIAS[platformAliasByQuery]\n    : undefined;\n}\n\nconst platformByQueryString = canUseDOM\n  ? getPlatformByQueryString(location.search)\n  : undefined;\n\nexport const ANDROID = Platform.ANDROID;\nexport const IOS = Platform.IOS;\nexport const VKCOM = Platform.VKCOM;\n\nexport type PlatformType =\n  | Platform.ANDROID\n  | Platform.IOS\n  | Platform.VKCOM\n  | string;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (platformByQueryString) {\n    return platformByQueryString;\n  }\n\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === \"ios\" ? IOS : ANDROID;\n}\n\nconst platformName = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = platformName === ANDROID;\n"],"file":"platform.js"}