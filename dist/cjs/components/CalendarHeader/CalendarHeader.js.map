{"version":3,"sources":["../../../../src/components/CalendarHeader/CalendarHeader.tsx"],"names":["CalendarHeader","viewDate","onChange","prevMonth","nextMonth","disablePickers","onNextMonth","onPrevMonth","className","prevMonthProps","nextMonthProps","prevMonthAriaLabel","nextMonthAriaLabel","changeMonthAriaLabel","changeYearAriaLabel","prevMonthIcon","nextMonthIcon","locale","React","useContext","LocaleProviderContext","onMonthsChange","useCallback","event","Number","target","value","onYearChange","months","useMemo","map","label","currentYear","getFullYear","years","formatter","Intl","DateTimeFormat","year","month","SizeType","REGULAR","format","getMonth","COMPACT","SelectType","accent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { setMonth, setYear, subMonths, addMonths } from \"../../lib/date\";\nimport {\n  Icon20ChevronLeftOutline,\n  Icon20ChevronRightOutline,\n  Icon12Dropdown,\n} from \"@vkontakte/icons\";\nimport { Tappable, TappableElementProps } from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport { SelectType } from \"../Select/Select\";\nimport { CustomSelect } from \"../CustomSelect/CustomSelect\";\nimport { SizeType } from \"../../hoc/withAdaptivity\";\nimport { getMonths, getYears } from \"../../lib/calendar\";\nimport { LocaleProviderContext } from \"../LocaleProviderContext/LocaleProviderContext\";\nimport { Paragraph } from \"../Typography/Paragraph/Paragraph\";\nimport { AdaptivityProvider } from \"../AdaptivityProvider/AdaptivityProvider\";\nimport \"./CalendarHeader.css\";\n\ntype ArrowMonthProps = Omit<TappableElementProps, \"onClick\" | \"aria-label\">;\n\nexport interface CalendarHeaderProps\n  extends Pick<React.HTMLAttributes<HTMLDivElement>, \"className\"> {\n  viewDate: Date;\n  prevMonth?: boolean;\n  nextMonth?: boolean;\n  disablePickers?: boolean;\n  prevMonthAriaLabel?: string;\n  nextMonthAriaLabel?: string;\n  changeMonthAriaLabel?: string;\n  changeYearAriaLabel?: string;\n  prevMonthIcon?: React.ReactNode;\n  nextMonthIcon?: React.ReactNode;\n  prevMonthProps?: ArrowMonthProps;\n  nextMonthProps?: ArrowMonthProps;\n  onChange(viewDate: Date): void;\n  /**\n   * Нажатие на кнопку переключения на следующий месяц.\n   */\n  onNextMonth?(): void;\n  /**\n   * Нажатие на кнопку переключения на предыдущий месяц.\n   */\n  onPrevMonth?(): void;\n}\n\nexport const CalendarHeader = ({\n  viewDate,\n  onChange,\n  prevMonth = true,\n  nextMonth = true,\n  disablePickers = false,\n  onNextMonth,\n  onPrevMonth,\n  className,\n  prevMonthProps,\n  nextMonthProps,\n  prevMonthAriaLabel = \"Предыдущий месяц\",\n  nextMonthAriaLabel = \"Следующий месяц\",\n  changeMonthAriaLabel = \"Изменить месяц\",\n  changeYearAriaLabel = \"Изменить год\",\n  prevMonthIcon = (\n    <Icon20ChevronLeftOutline\n      vkuiClass=\"CalendarHeader__nav-icon--accent\"\n      width={30}\n      height={30}\n    />\n  ),\n  nextMonthIcon = (\n    <Icon20ChevronRightOutline\n      vkuiClass=\"CalendarHeader__nav-icon--accent\"\n      width={30}\n      height={30}\n    />\n  ),\n}: CalendarHeaderProps) => {\n  const locale = React.useContext(LocaleProviderContext);\n  const onMonthsChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) =>\n      onChange(setMonth(viewDate, Number(event.target.value))),\n    [onChange, viewDate]\n  );\n  const onYearChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) =>\n      onChange(setYear(viewDate, Number(event.target.value))),\n    [onChange, viewDate]\n  );\n\n  const months = React.useMemo(\n    () =>\n      getMonths(locale).map(({ value, label }) => ({\n        value,\n        label: <span vkuiClass=\"CalendarHeader__month\">{label}</span>,\n      })),\n    [locale]\n  );\n\n  const currentYear = viewDate.getFullYear();\n\n  const years = React.useMemo(() => getYears(currentYear, 100), [currentYear]);\n\n  const formatter = new Intl.DateTimeFormat(locale, {\n    year: \"numeric\",\n    month: \"long\",\n  });\n\n  return (\n    <div vkuiClass=\"CalendarHeader\" className={className}>\n      {prevMonth && (\n        <AdaptivityProvider sizeX={SizeType.REGULAR}>\n          <Tappable\n            vkuiClass={classNames(\n              \"CalendarHeader__nav-icon\",\n              \"CalendarHeader__nav-icon-prev\"\n            )}\n            onClick={onPrevMonth}\n            aria-label={`${prevMonthAriaLabel}, ${formatter.format(\n              subMonths(viewDate, 1)\n            )}`}\n            {...prevMonthProps}\n          >\n            {prevMonthIcon}\n          </Tappable>\n        </AdaptivityProvider>\n      )}\n      {disablePickers ? (\n        <Paragraph vkuiClass=\"CalendarHeader__pickers\" weight=\"2\">\n          <span vkuiClass=\"CalendarHeader__month\">\n            {new Intl.DateTimeFormat(locale, {\n              month: \"long\",\n            }).format(viewDate)}\n          </span>\n          &nbsp;\n          {new Intl.DateTimeFormat(locale, {\n            year: \"numeric\",\n          }).format(viewDate)}\n        </Paragraph>\n      ) : (\n        <div vkuiClass=\"CalendarHeader__pickers\">\n          <CustomSelect\n            vkuiClass=\"CalendarHeader__picker\"\n            value={viewDate.getMonth()}\n            options={months}\n            dropdownOffsetDistance={4}\n            fixDropdownWidth={false}\n            sizeY={SizeType.COMPACT}\n            icon={<Icon12Dropdown />}\n            onChange={onMonthsChange}\n            forceDropdownPortal={false}\n            selectType={SelectType.accent}\n            aria-label={changeMonthAriaLabel}\n          />\n          <CustomSelect\n            vkuiClass=\"CalendarHeader__picker\"\n            value={viewDate.getFullYear()}\n            options={years}\n            dropdownOffsetDistance={4}\n            fixDropdownWidth={false}\n            sizeY={SizeType.COMPACT}\n            icon={<Icon12Dropdown />}\n            onChange={onYearChange}\n            forceDropdownPortal={false}\n            selectType={SelectType.accent}\n            aria-label={changeYearAriaLabel}\n          />\n        </div>\n      )}\n      {nextMonth && (\n        <AdaptivityProvider sizeX={SizeType.REGULAR}>\n          <Tappable\n            vkuiClass={classNames(\n              \"CalendarHeader__nav-icon\",\n              \"CalendarHeader__nav-icon-next\"\n            )}\n            onClick={onNextMonth}\n            aria-label={`${nextMonthAriaLabel}, ${formatter.format(\n              addMonths(viewDate, 1)\n            )}`}\n            {...nextMonthProps}\n          >\n            {nextMonthIcon}\n          </Tappable>\n        </AdaptivityProvider>\n      )}\n    </div>\n  );\n};\n"],"file":"CalendarHeader.js"}