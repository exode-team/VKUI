{"version":3,"sources":["../../../../src/components/AppRoot/AppRootPortal.tsx"],"names":["AppRootPortal","children","className","forcePortal","React","useContext","AppRootContext","portalRoot","mode"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAMA,aAEZ,GAAG,SAFSA,aAET,OAA0C;AAAA;;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAC5C,0BAA6BC,KAAK,CAACC,UAAN,CAAiBC,8BAAjB,CAA7B;AAAA,MAAQC,UAAR,qBAAQA,UAAR;AAAA,MAAoBC,IAApB,qBAAoBA,IAApB;;AAEAL,EAAAA,WAAW,mBAAGA,WAAH,uDAAkBK,IAAI,KAAK,MAAtC;AACA,SAAOD,UAAU,IAAIJ,WAAd,gBACL,4BAAa;AAAK,IAAA,SAAS,EAAED;AAAhB,KAA4BD,QAA5B,CAAb,EAA0DM,UAA1D,CADK,GAGL,qCAAC,KAAD,CAAO,QAAP,QAAiBN,QAAjB,CAHF;AAKD,CAXM","sourcesContent":["import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { AppRootContext } from \"./AppRootContext\";\n\nexport const AppRootPortal: React.FC<\n  React.PropsWithChildren<{ className?: string; forcePortal?: boolean }>\n> = ({ children, className, forcePortal }) => {\n  const { portalRoot, mode } = React.useContext(AppRootContext);\n\n  forcePortal = forcePortal ?? mode !== \"full\";\n  return portalRoot && forcePortal ? (\n    createPortal(<div className={className}>{children}</div>, portalRoot)\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n"],"file":"AppRootPortal.js"}