{"version":3,"sources":["../../../src/hooks/useWaitTransitionFinish.ts"],"names":["useWaitTransitionFinish","timeoutRef","React","useRef","document","detach","noop","remove","useCallback","current","waitTransitionFinish","element","eventHandler","durationFallback","hidden","transitionEvent","supported","name","addEventListener","removeEventListener","clearTimeout","setTimeout"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAC3C,MAAMC,UAAU,GAAGC,KAAK,CAACC,MAAN,CAAmD,IAAnD,CAAnB;;AACA,gBAAqB,kBAArB;AAAA,MAAQC,QAAR,WAAQA,QAAR;;AACA,MAAMC,MAAM,GAAGH,KAAK,CAACC,MAAN,CAAaG,WAAb,CAAf;AAEA,MAAMC,MAAM,GAAGL,KAAK,CAACM,WAAN,CAAkB,YAAM;AACrCH,IAAAA,MAAM,CAACI,OAAP;AACAJ,IAAAA,MAAM,CAACI,OAAP,GAAiBH,WAAjB;AACD,GAHc,EAGZ,EAHY,CAAf;AAKA,MAAMI,oBAAoB,GAAGR,KAAK,CAACM,WAAN,CAC3B,UACEG,OADF,EAEEC,YAFF,EAGEC,gBAHF,EAIK;AACH,QAAIF,OAAJ,EAAa;AACX,UACE,EAACP,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEU,MAAX,KACAC,+BAAgBC,SADhB,IAEAD,+BAAgBE,IAHlB,EAIE;AACAV,QAAAA,MAAM;AACNI,QAAAA,OAAO,CAACO,gBAAR,CAAyBH,+BAAgBE,IAAzC,EAA+CL,YAA/C;;AACAP,QAAAA,MAAM,CAACI,OAAP,GAAiB,YAAM;AACrB,cAAIM,+BAAgBE,IAApB,EAA0B;AACxBN,YAAAA,OAAO,CAACQ,mBAAR,CAA4BJ,+BAAgBE,IAA5C,EAAkDL,YAAlD;AACD;AACF,SAJD;AAKD,OAZD,MAYO;AACL,YAAIX,UAAJ,aAAIA,UAAJ,eAAIA,UAAU,CAAEQ,OAAhB,EAAyB;AACvBW,UAAAA,YAAY,CAACnB,UAAU,CAACQ,OAAZ,CAAZ;AACD;;AACDR,QAAAA,UAAU,CAACQ,OAAX,GAAqBY,UAAU,CAACT,YAAD,EAAeC,gBAAf,CAA/B;AACD;AACF;AACF,GA1B0B,EA2B3B,CAACT,QAAD,EAAWG,MAAX,EAAmBN,UAAnB,CA3B2B,CAA7B;AA8BA,SAAO;AACLS,IAAAA,oBAAoB,EAApBA;AADK,GAAP;AAGD,CA3CM","sourcesContent":["import * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { noop } from \"../lib/utils\";\nimport { transitionEvent } from \"../lib/supportEvents\";\n\nexport const useWaitTransitionFinish = () => {\n  const timeoutRef = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n  const { document } = useDOM();\n  const detach = React.useRef(noop);\n\n  const remove = React.useCallback(() => {\n    detach.current();\n    detach.current = noop;\n  }, []);\n\n  const waitTransitionFinish = React.useCallback(\n    (\n      element: HTMLElement | null,\n      eventHandler: VoidFunction,\n      durationFallback: number\n    ) => {\n      if (element) {\n        if (\n          !document?.hidden &&\n          transitionEvent.supported &&\n          transitionEvent.name\n        ) {\n          remove();\n          element.addEventListener(transitionEvent.name, eventHandler);\n          detach.current = () => {\n            if (transitionEvent.name) {\n              element.removeEventListener(transitionEvent.name, eventHandler);\n            }\n          };\n        } else {\n          if (timeoutRef?.current) {\n            clearTimeout(timeoutRef.current);\n          }\n          timeoutRef.current = setTimeout(eventHandler, durationFallback);\n        }\n      }\n    },\n    [document, remove, timeoutRef]\n  );\n\n  return {\n    waitTransitionFinish,\n  };\n};\n"],"file":"useWaitTransitionFinish.js"}