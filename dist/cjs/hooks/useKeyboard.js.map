{"version":3,"sources":["../../../src/hooks/useKeyboard.ts"],"names":["getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","document","React","useState","isOpened","setIsOpened","onFocus","useCallback","event","type","activeElement","tagName","useEffect"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAMA;AACA;AACA;AACA;AACO,SAASA,uBAAT,CAAiCC,MAAjC,EAAuD;AAC5D,MACEC,WADF,GAGID,MAHJ,CACEC,WADF;AAAA,MAEYC,WAFZ,GAGIF,MAHJ,CAEEG,MAFF,CAEYD,WAFZ;AAKA,MAAME,yBAAyB,GAAGC,IAAI,CAACC,KAAL,CAChC,CAAC,IAAIL,WAAW,GAAGC,WAAnB,IAAkC,GADF,CAAlC;AAGA,SAAOE,yBAAyB,GAAG,EAAnC;AACD;;AAED,IAAMG,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;;AAKO,SAASC,WAAT,GAA8C;AAAA;;AACnD,gBAAqB,kBAArB;AAAA,MAAQC,QAAR,WAAQA,QAAR;;AAEA,wBAAgCC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAhC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,WAAN,CACd,UAACC,KAAD,EAA8B;AAAA;;AAC5B,QAAMJ,QAAQ,GACZ,CAACI,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACC,IAAN,KAAe,SAAlC,MACC,CAAAR,QAAQ,SAAR,IAAAA,QAAQ,WAAR,qCAAAA,QAAQ,CAAES,aAAV,gFAAyBC,OAAzB,MAAqC,OAArC,IACC,CAAAV,QAAQ,SAAR,IAAAA,QAAQ,WAAR,sCAAAA,QAAQ,CAAES,aAAV,kFAAyBC,OAAzB,MAAqC,UAFvC,CADF;AAIAN,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAPa,EAQd,CAACH,QAAD,aAACA,QAAD,iDAACA,QAAQ,CAAES,aAAX,2DAAC,uBAAyBC,OAA1B,CARc,CAAhB;AAWA;AACF;AACA;AACA;;AACET,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AACpBN,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAIA,sDAAuBL,QAAvB,EAAiC,UAAjC,EAA6CK,OAA7C,EAAsDT,YAAtD;AACA,sDAAuBI,QAAvB,EAAiC,SAAjC,EAA4CK,OAA5C,EAAqDT,YAArD;AAEA,SAAO;AAAEO,IAAAA,QAAQ,EAARA;AAAF,GAAP;AACD","sourcesContent":["import * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round(\n    (1 - innerHeight / availHeight) * 100\n  );\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      const isOpened =\n        (event === true || event.type === \"focusin\") &&\n        (document?.activeElement?.tagName === \"INPUT\" ||\n          document?.activeElement?.tagName === \"TEXTAREA\");\n      setIsOpened(isOpened);\n    },\n    [document?.activeElement?.tagName]\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n\n  return { isOpened };\n}\n"],"file":"useKeyboard.js"}