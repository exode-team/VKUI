{"version":3,"sources":["../../../src/lib/platform.ts"],"names":["computeBrowserInfo","querystring","canUseDOM","Platform","PLATFORM_ALIAS","desktop_web","VKCOM","isPlatformAlias","platformAlias","getPlatformByQueryString","queryString","parsedQuery","parse","platformAliasByQuery","undefined","e","console","warn","platformByQueryString","location","search","ANDROID","IOS","platform","browserInfo","system","platformName","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":"AAAA,SAAsBA,kBAAtB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,SAAT;AAEA,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAMZ,IAAMC,cAAc,GAAG;AACrBC,EAAAA,WAAW,EAAEF,QAAQ,CAACG;AADD,CAAvB;;AAIA,SAASC,eAAT,CACEC,aADF,EAEgD;AAC9C,SAAOA,aAAa,IAAIJ,cAAxB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASK,wBAAT,CAAkCC,WAAlC,EAA6E;AAC3E,MAAI;AACF,QAAMC,WAAW,GAAGV,WAAW,CAACW,KAAZ,CAAkBF,WAAlB,CAApB;AACA,QAAMG,oBAAoB,GAAGF,WAAW,CAAC,aAAD,CAAxC;AAEA,WAAO,OAAOE,oBAAP,KAAgC,QAAhC,IACLN,eAAe,CAACM,oBAAD,CADV,GAEHT,cAAc,CAACS,oBAAD,CAFX,GAGHC,SAHJ;AAID,GARD,CAQE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AAEA,WAAOD,SAAP;AACD;AACF;;AAED,IAAMI,qBAAqB,GAAGhB,SAAS,GACnCO,wBAAwB,CAACU,QAAQ,CAACC,MAAV,CADW,GAEnCN,SAFJ;AAIA,OAAO,IAAMO,OAAO,GAAGlB,QAAQ,CAACkB,OAAzB;AACP,OAAO,IAAMC,GAAG,GAAGnB,QAAQ,CAACmB,GAArB;AACP,OAAO,IAAMhB,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AAQP,OAAO,SAASiB,QAAT,CAAkBC,WAAlB,EAA2D;AAChE,MAAIN,qBAAJ,EAA2B;AACzB,WAAOA,qBAAP;AACD;;AAED,MAAI,CAACM,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAGxB,kBAAkB,EAAhC;AACD;;AAED,SAAOwB,WAAW,CAACC,MAAZ,KAAuB,KAAvB,GAA+BH,GAA/B,GAAqCD,OAA5C;AACD;AAED,IAAMK,YAAY,GAAGH,QAAQ,EAA7B;AAEA;AACA;AACA;;AACA,OAAO,IAAMI,eAAwB,GAAGD,YAAY,KAAKJ,GAAlD;AACP;AACA;AACA;;AACA,OAAO,IAAMM,mBAA4B,GAAGF,YAAY,KAAKL,OAAtD","sourcesContent":["import { BrowserInfo, computeBrowserInfo } from \"./browser\";\nimport { querystring } from \"@vkontakte/vkjs\";\nimport { canUseDOM } from \"./dom\";\n\nexport enum Platform {\n  ANDROID = \"android\",\n  IOS = \"ios\",\n  VKCOM = \"vkcom\",\n}\n\nconst PLATFORM_ALIAS = {\n  desktop_web: Platform.VKCOM,\n};\n\nfunction isPlatformAlias(\n  platformAlias: string\n): platformAlias is keyof typeof PLATFORM_ALIAS {\n  return platformAlias in PLATFORM_ALIAS;\n}\n\n/**\n * Значение, которое передаётся в качестве query-параметра при открытии VK Mini Apps\n * @see {@link https://dev.vk.com/mini-apps/development/launch-params#vk_platform vk_platform}\n */\nfunction getPlatformByQueryString(queryString: string): Platform | undefined {\n  try {\n    const parsedQuery = querystring.parse(queryString);\n    const platformAliasByQuery = parsedQuery[\"vk_platform\"];\n\n    return typeof platformAliasByQuery === \"string\" &&\n      isPlatformAlias(platformAliasByQuery)\n      ? PLATFORM_ALIAS[platformAliasByQuery]\n      : undefined;\n  } catch (e) {\n    console.warn(e);\n\n    return undefined;\n  }\n}\n\nconst platformByQueryString = canUseDOM\n  ? getPlatformByQueryString(location.search)\n  : undefined;\n\nexport const ANDROID = Platform.ANDROID;\nexport const IOS = Platform.IOS;\nexport const VKCOM = Platform.VKCOM;\n\nexport type PlatformType =\n  | Platform.ANDROID\n  | Platform.IOS\n  | Platform.VKCOM\n  | string;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (platformByQueryString) {\n    return platformByQueryString;\n  }\n\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === \"ios\" ? IOS : ANDROID;\n}\n\nconst platformName = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = platformName === ANDROID;\n"],"file":"platform.js"}