{"version":3,"sources":["../../src/lib/select.ts"],"names":["getTitleFromChildren","FormFieldMode","SelectType","findAllIncludes","target","search","includes","i","indexOf","push","letterRegexp","RegExp","e","_getOptionLabel","option","label","defaultFilterFn","query","getOptionLabel","toLocaleLowerCase","startsWith","index","test","length","getFormFieldModeFromSelectType","selectType","default","plain"],"mappings":";AACA,SAASA,oBAAT;AACA,SAASC,aAAT;AACA,SAASC,UAAT;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAA8B;AAAA,MAA7BC,MAA6B,uEAApB,EAAoB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACpD,MAAMC,QAAQ,GAAG,EAAjB;AAEA,MAAIC,CAAC,GAAGH,MAAM,CAACI,OAAP,CAAeH,MAAf,CAAR;;AACA,SAAOE,CAAC,KAAK,CAAC,CAAd,EAAiB;AACfD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,CAAd;AACAA,IAAAA,CAAC,GAAGH,MAAM,CAACI,OAAP,CAAeH,MAAf,EAAuBE,CAAC,GAAG,CAA3B,CAAJ;AACD;;AAED,SAAOD,QAAP;AACD,CAVD;;AAYA,IAAII,YAAJ,C,CAEA;;AACA,IAAI;AACFA,EAAAA,YAAY,GAAG,IAAIC,MAAJ,CAAW,QAAX,EAAqB,GAArB,CAAf;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;;AAId,IAAMC,eAA+B,GAAG,SAAlCA,eAAkC,CAACC,MAAD;AAAA,SACtCd,oBAAoB,CAACc,MAAM,CAACC,KAAR,CADkB;AAAA,CAAxC;;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAI1B;AAAA;;AAAA,MAHHC,KAGG,uEAHK,EAGL;AAAA,MAFHH,MAEG;AAAA,MADHI,cACG,uEAD8BL,eAC9B;AACHI,EAAAA,KAAK,GAAGA,KAAK,CAACE,iBAAN,EAAR;AACA,MAAIJ,KAAK,uBAAGG,cAAc,CAACJ,MAAD,CAAjB,qDAAG,iBAAwBK,iBAAxB,EAAZ;;AAEA,MAAIJ,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEK,UAAP,CAAkBH,KAAlB,CAAJ,EAA8B;AAC5B,WAAO,IAAP;AACD;;AAED,MAAMX,QAAQ,GAAGH,eAAe,CAACY,KAAD,EAAQE,KAAR,CAAhC,CARG,CAUH;;AACA,MAAIP,YAAY,IAAIK,KAApB,EAA2B;AAAA,+CACLT,QADK;AAAA;;AAAA;AACzB,0DAA8B;AAAA,YAAnBe,MAAmB;;AAC5B,YAAI,CAACX,YAAY,CAACY,IAAb,CAAkBP,KAAK,CAACM,MAAK,GAAG,CAAT,CAAvB,CAAL,EAA0C;AACxC,iBAAO,IAAP;AACD;AACF;AALwB;AAAA;AAAA;AAAA;AAAA;AAM1B,GAND,MAMO;AACL;AACA,WAAOf,QAAQ,CAACiB,MAAT,GAAkB,CAAzB;AACD;;AAED,SAAO,KAAP;AACD,CA3BM;AA6BP,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,GAEzC;AAAA,MADHC,UACG,uEADmCvB,UAAU,CAACwB,OAC9C;AACH,SAAOD,UAAU,KAAKvB,UAAU,CAACwB,OAA1B,GACHzB,aAAa,CAACyB,OADX,GAEHzB,aAAa,CAAC0B,KAFlB;AAGD,CANM","sourcesContent":["import * as React from \"react\";\nimport { getTitleFromChildren } from \"./utils\";\nimport { FormFieldMode } from \"../components/FormField/FormField\";\nimport { SelectType } from \"../components/Select/Select\";\n\ntype Option = {\n  label?: React.ReactElement | string;\n  [index: string]: any;\n};\n\nconst findAllIncludes = (target = \"\", search = \"\") => {\n  const includes = [];\n\n  let i = target.indexOf(search);\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nlet letterRegexp: RegExp;\n\n// На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\ntry {\n  letterRegexp = new RegExp(\"\\\\p{L}\", \"u\");\n} catch (e) {}\n\ntype GetOptionLabel = (option: Option) => string | undefined;\n\nconst _getOptionLabel: GetOptionLabel = (option) =>\n  getTitleFromChildren(option.label);\n\nexport const defaultFilterFn = (\n  query = \"\",\n  option: Option,\n  getOptionLabel: GetOptionLabel = _getOptionLabel\n) => {\n  query = query.toLocaleLowerCase();\n  let label = getOptionLabel(option)?.toLocaleLowerCase();\n\n  if (label?.startsWith(query)) {\n    return true;\n  }\n\n  const includes = findAllIncludes(label, query);\n\n  // Ищем вхождение перед началом которого не буква\n  if (letterRegexp && label) {\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};\n\nexport const getFormFieldModeFromSelectType = (\n  selectType: keyof typeof SelectType = SelectType.default\n) => {\n  return selectType === SelectType.default\n    ? FormFieldMode.default\n    : FormFieldMode.plain;\n};\n"],"file":"select.js"}